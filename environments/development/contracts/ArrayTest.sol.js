// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"getHolder","outputs":[{"name":"","type":"uint256[10]"}],"type":"function"},{"constant":false,"inputs":[],"name":"doSetTest","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getVariableHolder","outputs":[{"name":"","type":"uint256[]"}],"type":"function"},{"constant":true,"inputs":[],"name":"doGetTest","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"msg","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Message","type":"event"}],
    binary: "606060405261036b806100126000396000f3606060405260e060020a60003504630c05b3c5811461003c578063518e843b146100d4578063bcf0c7d714610117578063f554485714610180575b005b61019561014060405190810160405280600a905b6000815260200190600190039081610050575050604080516101408101909152600a815b60008152602001906001900390816100745750600090505b600054811015610345576000805482908110156100025750805260008051602061034b8339815191528101548282600a8110156100025750506020820283015260010161008c565b61003a600080546001810180835582818380158290116102025781836000526020600020918201910161020291905b8082111561024b5760008155600101610103565b6040805160208181018352600080835283519182019093528281526101b8925b600a811015610345576000805482908110156100025781805260008051602061034b83398151915201905054828281518110156100025760209081029091010152600101610137565b60005460408051918252519081900360200190f35b604051808261014080838184600060046099f15090500191505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390f35b50505060009283525060208220600191018190558154908101808355828183801582901161024f5782805261024f9060008051602061034b833981519152908101908301610103565b5090565b5050506000928352506020822060029101558054600181018083558281838015829011610297578280526102979060008051602061034b833981519152908101908301610103565b505050919090600052602060002090016000506003905550600054604080517f312d4c656e6774680000000000000000000000000000000000000000000000008152602081019290925280517fc3a483fe0783d303469350b1f0524c276a1069aee2ba2e237157563492ef77a99281900390910190a160006000506001815481101561000257508080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56455565b5091905056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    unlinked_binary: "606060405261036b806100126000396000f3606060405260e060020a60003504630c05b3c5811461003c578063518e843b146100d4578063bcf0c7d714610117578063f554485714610180575b005b61019561014060405190810160405280600a905b6000815260200190600190039081610050575050604080516101408101909152600a815b60008152602001906001900390816100745750600090505b600054811015610345576000805482908110156100025750805260008051602061034b8339815191528101548282600a8110156100025750506020820283015260010161008c565b61003a600080546001810180835582818380158290116102025781836000526020600020918201910161020291905b8082111561024b5760008155600101610103565b6040805160208181018352600080835283519182019093528281526101b8925b600a811015610345576000805482908110156100025781805260008051602061034b83398151915201905054828281518110156100025760209081029091010152600101610137565b60005460408051918252519081900360200190f35b604051808261014080838184600060046099f15090500191505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390f35b50505060009283525060208220600191018190558154908101808355828183801582901161024f5782805261024f9060008051602061034b833981519152908101908301610103565b5090565b5050506000928352506020822060029101558054600181018083558281838015829011610297578280526102979060008051602061034b833981519152908101908301610103565b505050919090600052602060002090016000506003905550600054604080517f312d4c656e6774680000000000000000000000000000000000000000000000008152602081019290925280517fc3a483fe0783d303469350b1f0524c276a1069aee2ba2e237157563492ef77a99281900390910190a160006000506001815481101561000257508080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56455565b5091905056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    address: "",
    generated_with: "2.0.8",
    contract_name: "ArrayTest"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("ArrayTest error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("ArrayTest error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("ArrayTest error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("ArrayTest error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.ArrayTest = Contract;
  }

})();
